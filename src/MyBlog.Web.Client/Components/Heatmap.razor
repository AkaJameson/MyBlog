@using System.Collections.Generic
@using System.Linq

<div class="heatmap-container">
    <div class="heatmap-header">
        <button class="nav-btn" @onclick="PrevMonth">&lt;</button>
        <h3>@CurrentMonth.ToString("yyyy年MM月")</h3>
        <button class="nav-btn" @onclick="NextMonth">&gt;</button>
    </div>

    <div class="heatmap">
        <!-- 星期标签 -->
        <div class="heatmap-weekdays">
            <div>日</div>
            <div>一</div>
            <div>二</div>
            <div>三</div>
            <div>四</div>
            <div>五</div>
            <div>六</div>
        </div>

        <!-- 热力图格子 -->
        <div class="heatmap-grid">
            @foreach (var cell in HeatmapData)
            {
                <div class="heatmap-cell @GetIntensityClass(cell.Value)"
                     title="@(cell.IsCurrentMonth ? $"{cell.Date:yyyy-MM-dd}：{cell.Value}次" : "")"
                     @onclick="() => { if (cell.IsCurrentMonth) CellClicked(cell.Date); }">
                </div>
            }
        </div>
    </div>

    <div class="heatmap-legend">
        <span>少</span>
        <div class="legend-item level0"></div>
        <div class="legend-item level1"></div>
        <div class="legend-item level2"></div>
        <div class="legend-item level3"></div>
        <div class="legend-item level4"></div>
        <span>多</span>
    </div>
</div>

@code {
    private Dictionary<DateTime, int> ActivityData { get; set; }
    [Parameter] public Func<int, Task<Dictionary<DateTime, int>>> QueryData { get; set; }
    private int CurrentYear { get; set; } = DateTime.Today.Year;
    private DateTime CurrentMonth = DateTime.Today;
    private List<HeatmapCell> HeatmapData = new();

    protected override async Task OnInitializedAsync()
    {
        if (QueryData != null)
        {
            ActivityData = await QueryData.Invoke(CurrentYear);
        }
        else
        {
            ActivityData = new Dictionary<DateTime, int>();
        }
        GenerateHeatmapData();
    }

    protected override void OnParametersSet()
    {
        GenerateHeatmapData();
    }

    private void GenerateHeatmapData()
    {
        HeatmapData.Clear();
        if (ActivityData == null) return;

        var firstDay = new DateTime(CurrentMonth.Year, CurrentMonth.Month, 1);
        var lastDay = firstDay.AddMonths(1).AddDays(-1);

        // 计算第一天的星期（星期日为0）
        int startDayOfWeek = (int)firstDay.DayOfWeek;

        // 填充前一个月空白
        for (int i = 0; i < startDayOfWeek; i++)
        {
            DateTime prevDay = firstDay.AddDays(-(startDayOfWeek - i));
            HeatmapData.Add(new HeatmapCell
                {
                    Date = prevDay,
                    Value = -1,
                    IsCurrentMonth = false
                });
        }

        // 当前月日期
        for (DateTime date = firstDay; date <= lastDay; date = date.AddDays(1))
        {
            int value = ActivityData.ContainsKey(date.Date) ? ActivityData[date.Date] : 0;
            HeatmapData.Add(new HeatmapCell
                {
                    Date = date,
                    Value = value,
                    IsCurrentMonth = true
                });
        }

        // 计算最后一天的星期
        int endDayOfWeek = (int)lastDay.DayOfWeek;

        // 填充后一个月空白
        int nextMonthDays = 6 - endDayOfWeek;
        for (int i = 1; i <= nextMonthDays; i++)
        {
            DateTime nextDay = lastDay.AddDays(i);
            HeatmapData.Add(new HeatmapCell
                {
                    Date = nextDay,
                    Value = -1,
                    IsCurrentMonth = false
                });
        }
    }

    private string GetIntensityClass(int value)
    {
        return value switch
        {
            -1 => "empty",
            0 => "level0",
            <= 3 => "level1",
            <= 6 => "level2",
            <= 9 => "level3",
            _ => "level4"
        };
    }

    private void PrevMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(-1);
        if (CurrentMonth.Year != CurrentYear)
        {
            CurrentYear = CurrentMonth.Year;
            ActivityData = QueryData?.Invoke(CurrentYear)?.Result;
        }
        GenerateHeatmapData();
    }

    private void NextMonth()
    {
        CurrentMonth = CurrentMonth.AddMonths(1);
        if (CurrentMonth.Year != CurrentYear)
        {
            CurrentYear = CurrentMonth.Year;
            ActivityData = QueryData?.Invoke(CurrentYear)?.Result;
        }
        GenerateHeatmapData();
    }

    private void CellClicked(DateTime date)
    {
        // 点击事件处理
    }

    private class HeatmapCell
    {
        public DateTime Date { get; set; }
        public int Value { get; set; }
        public bool IsCurrentMonth { get; set; }
    }
}
